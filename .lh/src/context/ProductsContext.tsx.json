{
    "sourceFile": "src/context/ProductsContext.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1716296981114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1716297039005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,70 @@\n+import React, {\n+  createContext,\n+  FC,\n+  useContext,\n+  useEffect,\n+  useState,\n+} from 'react';\n+import { IProductDetails } from '../types';\n+\n+interface IProductsContext {\n+  phones: IProductDetails[];\n+}\n+\n+export const ProductsContext = createContext<IProductsContext>({\n+  phones: [],\n+});\n+\n+interface Props {\n+  children: React.ReactNode;\n+}\n+\n+export const ProductsProvider: FC<Props> = ({ children }) => {\n+  const [phones, setPhones] = useState<IProductDetails[]>([]);\n+  // eslint-disable-next-line @typescript-eslint/naming-convention\n+  const [_loading, setLoading] = useState(true);\n+  const [_error, setError] = useState(null);\n+\n+  useEffect(() => {\n+    fetch('/api/phones.json')\n+      .then(response => {\n+        if (!response.ok) {\n+          throw new Error('Network response was not ok');\n+        }\n+\n+        return response.json();\n+      })\n+      .then(data => {\n+        setPhones(data);\n+        setLoading(false);\n+        // eslint-disable-next-line no-console\n+        console.log(data);\n+      })\n+      .catch(error => {\n+        setError(error);\n+        setLoading(false);\n+      });\n+  }, []);\n+\n+  return (\n+    <ProductsContext.Provider\n+      value={{\n+        phones,\n+      }}\n+    >\n+      {children}\n+    </ProductsContext.Provider>\n+  );\n+};\n+\n+export const useProductsContext = (): IProductsContext => {\n+  const context = useContext(ProductsContext);\n+\n+  if (!context) {\n+    throw new Error(\n+      'useProductsContext must be used within a ProductsProvider',\n+    );\n+  }\n+\n+  return context;\n+};\n"
                },
                {
                    "date": 1716297050422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,70 @@\n+/* eslint-disable @typescript-eslint/naming-convention */\n+import React, {\n+  createContext,\n+  FC,\n+  useContext,\n+  useEffect,\n+  useState,\n+} from 'react';\n+import { IProductDetails } from '../types';\n+\n+interface IProductsContext {\n+  phones: IProductDetails[];\n+}\n+\n+export const ProductsContext = createContext<IProductsContext>({\n+  phones: [],\n+});\n+\n+interface Props {\n+  children: React.ReactNode;\n+}\n+\n+export const ProductsProvider: FC<Props> = ({ children }) => {\n+  const [phones, setPhones] = useState<IProductDetails[]>([]);\n+  const [_loading, setLoading] = useState(true);\n+  const [_error, setError] = useState(null);\n+\n+  useEffect(() => {\n+    fetch('/api/phones.json')\n+      .then(response => {\n+        if (!response.ok) {\n+          throw new Error('Network response was not ok');\n+        }\n+\n+        return response.json();\n+      })\n+      .then(data => {\n+        setPhones(data);\n+        setLoading(false);\n+        // eslint-disable-next-line no-console\n+        console.log(data);\n+      })\n+      .catch(error => {\n+        setError(error);\n+        setLoading(false);\n+      });\n+  }, []);\n+\n+  return (\n+    <ProductsContext.Provider\n+      value={{\n+        phones,\n+      }}\n+    >\n+      {children}\n+    </ProductsContext.Provider>\n+  );\n+};\n+\n+export const useProductsContext = (): IProductsContext => {\n+  const context = useContext(ProductsContext);\n+\n+  if (!context) {\n+    throw new Error(\n+      'useProductsContext must be used within a ProductsProvider',\n+    );\n+  }\n+\n+  return context;\n+};\n"
                },
                {
                    "date": 1716297128898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,69 @@\n+import React, {\n+  createContext,\n+  FC,\n+  useContext,\n+  useEffect,\n+  useState,\n+} from 'react';\n+import { IProductDetails } from '../types';\n+\n+interface IProductsContext {\n+  phones: IProductDetails[];\n+}\n+\n+export const ProductsContext = createContext<IProductsContext>({\n+  phones: [],\n+});\n+\n+interface Props {\n+  children: React.ReactNode;\n+}\n+\n+export const ProductsProvider: FC<Props> = ({ children }) => {\n+  const [phones, setPhones] = useState<IProductDetails[]>([]);\n+  const [loading, setLoading] = useState(true);\n+  const [_error, setError] = useState(null);\n+\n+  useEffect(() => {\n+    fetch('/api/phones.json')\n+      .then(response => {\n+        if (!response.ok) {\n+          throw new Error('Network response was not ok');\n+        }\n+\n+        return response.json();\n+      })\n+      .then(data => {\n+        setPhones(data);\n+        setLoading(false);\n+        // eslint-disable-next-line no-console\n+        console.log(data);\n+      })\n+      .catch(error => {\n+        setError(error);\n+        setLoading(false);\n+      });\n+  }, []);\n+\n+  return (\n+    <ProductsContext.Provider\n+      value={{\n+        phones,\n+      }}\n+    >\n+      {children}\n+    </ProductsContext.Provider>\n+  );\n+};\n+\n+export const useProductsContext = (): IProductsContext => {\n+  const context = useContext(ProductsContext);\n+\n+  if (!context) {\n+    throw new Error(\n+      'useProductsContext must be used within a ProductsProvider',\n+    );\n+  }\n+\n+  return context;\n+};\n"
                },
                {
                    "date": 1716297135742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,69 @@\n+import React, {\n+  createContext,\n+  FC,\n+  useContext,\n+  useEffect,\n+  useState,\n+} from 'react';\n+import { IProductDetails } from '../types';\n+\n+interface IProductsContext {\n+  phones: IProductDetails[];\n+}\n+\n+export const ProductsContext = createContext<IProductsContext>({\n+  phones: [],\n+});\n+\n+interface Props {\n+  children: React.ReactNode;\n+}\n+\n+export const ProductsProvider: FC<Props> = ({ children }) => {\n+  const [phones, setPhones] = useState<IProductDetails[]>([]);\n+  const [, setLoading] = useState(true);\n+  const [_error, setError] = useState(null);\n+\n+  useEffect(() => {\n+    fetch('/api/phones.json')\n+      .then(response => {\n+        if (!response.ok) {\n+          throw new Error('Network response was not ok');\n+        }\n+\n+        return response.json();\n+      })\n+      .then(data => {\n+        setPhones(data);\n+        setLoading(false);\n+        // eslint-disable-next-line no-console\n+        console.log(data);\n+      })\n+      .catch(error => {\n+        setError(error);\n+        setLoading(false);\n+      });\n+  }, []);\n+\n+  return (\n+    <ProductsContext.Provider\n+      value={{\n+        phones,\n+      }}\n+    >\n+      {children}\n+    </ProductsContext.Provider>\n+  );\n+};\n+\n+export const useProductsContext = (): IProductsContext => {\n+  const context = useContext(ProductsContext);\n+\n+  if (!context) {\n+    throw new Error(\n+      'useProductsContext must be used within a ProductsProvider',\n+    );\n+  }\n+\n+  return context;\n+};\n"
                }
            ],
            "date": 1716296981114,
            "name": "Commit-0",
            "content": "import React, {\n  createContext,\n  FC,\n  useContext,\n  useEffect,\n  useState,\n} from 'react';\nimport { IProductDetails } from '../types';\n\ninterface IProductsContext {\n  phones: IProductDetails[];\n}\n\nexport const ProductsContext = createContext<IProductsContext>({\n  phones: [],\n});\n\ninterface Props {\n  children: React.ReactNode;\n}\n\nexport const ProductsProvider: FC<Props> = ({ children }) => {\n  const [phones, setPhones] = useState<IProductDetails[]>([]);\n  const [_loading, setLoading] = useState(true);\n  const [_error, setError] = useState(null);\n\n  useEffect(() => {\n    fetch('/api/phones.json')\n      .then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n\n        return response.json();\n      })\n      .then(data => {\n        setPhones(data);\n        setLoading(false);\n        // eslint-disable-next-line no-console\n        console.log(data);\n      })\n      .catch(error => {\n        setError(error);\n        setLoading(false);\n      });\n  }, []);\n\n  return (\n    <ProductsContext.Provider\n      value={{\n        phones,\n      }}\n    >\n      {children}\n    </ProductsContext.Provider>\n  );\n};\n\nexport const useProductsContext = (): IProductsContext => {\n  const context = useContext(ProductsContext);\n\n  if (!context) {\n    throw new Error(\n      'useProductsContext must be used within a ProductsProvider',\n    );\n  }\n\n  return context;\n};\n"
        }
    ]
}