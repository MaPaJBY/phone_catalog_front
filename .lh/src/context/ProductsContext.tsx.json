{
    "sourceFile": "src/context/ProductsContext.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 20,
            "patches": [
                {
                    "date": 1716296981114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1716297039005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,70 @@\n+import React, {\n+  createContext,\n+  FC,\n+  useContext,\n+  useEffect,\n+  useState,\n+} from 'react';\n+import { IProductDetails } from '../types';\n+\n+interface IProductsContext {\n+  phones: IProductDetails[];\n+}\n+\n+export const ProductsContext = createContext<IProductsContext>({\n+  phones: [],\n+});\n+\n+interface Props {\n+  children: React.ReactNode;\n+}\n+\n+export const ProductsProvider: FC<Props> = ({ children }) => {\n+  const [phones, setPhones] = useState<IProductDetails[]>([]);\n+  // eslint-disable-next-line @typescript-eslint/naming-convention\n+  const [_loading, setLoading] = useState(true);\n+  const [_error, setError] = useState(null);\n+\n+  useEffect(() => {\n+    fetch('/api/phones.json')\n+      .then(response => {\n+        if (!response.ok) {\n+          throw new Error('Network response was not ok');\n+        }\n+\n+        return response.json();\n+      })\n+      .then(data => {\n+        setPhones(data);\n+        setLoading(false);\n+        // eslint-disable-next-line no-console\n+        console.log(data);\n+      })\n+      .catch(error => {\n+        setError(error);\n+        setLoading(false);\n+      });\n+  }, []);\n+\n+  return (\n+    <ProductsContext.Provider\n+      value={{\n+        phones,\n+      }}\n+    >\n+      {children}\n+    </ProductsContext.Provider>\n+  );\n+};\n+\n+export const useProductsContext = (): IProductsContext => {\n+  const context = useContext(ProductsContext);\n+\n+  if (!context) {\n+    throw new Error(\n+      'useProductsContext must be used within a ProductsProvider',\n+    );\n+  }\n+\n+  return context;\n+};\n"
                },
                {
                    "date": 1716297050422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,70 @@\n+/* eslint-disable @typescript-eslint/naming-convention */\n+import React, {\n+  createContext,\n+  FC,\n+  useContext,\n+  useEffect,\n+  useState,\n+} from 'react';\n+import { IProductDetails } from '../types';\n+\n+interface IProductsContext {\n+  phones: IProductDetails[];\n+}\n+\n+export const ProductsContext = createContext<IProductsContext>({\n+  phones: [],\n+});\n+\n+interface Props {\n+  children: React.ReactNode;\n+}\n+\n+export const ProductsProvider: FC<Props> = ({ children }) => {\n+  const [phones, setPhones] = useState<IProductDetails[]>([]);\n+  const [_loading, setLoading] = useState(true);\n+  const [_error, setError] = useState(null);\n+\n+  useEffect(() => {\n+    fetch('/api/phones.json')\n+      .then(response => {\n+        if (!response.ok) {\n+          throw new Error('Network response was not ok');\n+        }\n+\n+        return response.json();\n+      })\n+      .then(data => {\n+        setPhones(data);\n+        setLoading(false);\n+        // eslint-disable-next-line no-console\n+        console.log(data);\n+      })\n+      .catch(error => {\n+        setError(error);\n+        setLoading(false);\n+      });\n+  }, []);\n+\n+  return (\n+    <ProductsContext.Provider\n+      value={{\n+        phones,\n+      }}\n+    >\n+      {children}\n+    </ProductsContext.Provider>\n+  );\n+};\n+\n+export const useProductsContext = (): IProductsContext => {\n+  const context = useContext(ProductsContext);\n+\n+  if (!context) {\n+    throw new Error(\n+      'useProductsContext must be used within a ProductsProvider',\n+    );\n+  }\n+\n+  return context;\n+};\n"
                },
                {
                    "date": 1716297128898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,69 @@\n+import React, {\n+  createContext,\n+  FC,\n+  useContext,\n+  useEffect,\n+  useState,\n+} from 'react';\n+import { IProductDetails } from '../types';\n+\n+interface IProductsContext {\n+  phones: IProductDetails[];\n+}\n+\n+export const ProductsContext = createContext<IProductsContext>({\n+  phones: [],\n+});\n+\n+interface Props {\n+  children: React.ReactNode;\n+}\n+\n+export const ProductsProvider: FC<Props> = ({ children }) => {\n+  const [phones, setPhones] = useState<IProductDetails[]>([]);\n+  const [loading, setLoading] = useState(true);\n+  const [_error, setError] = useState(null);\n+\n+  useEffect(() => {\n+    fetch('/api/phones.json')\n+      .then(response => {\n+        if (!response.ok) {\n+          throw new Error('Network response was not ok');\n+        }\n+\n+        return response.json();\n+      })\n+      .then(data => {\n+        setPhones(data);\n+        setLoading(false);\n+        // eslint-disable-next-line no-console\n+        console.log(data);\n+      })\n+      .catch(error => {\n+        setError(error);\n+        setLoading(false);\n+      });\n+  }, []);\n+\n+  return (\n+    <ProductsContext.Provider\n+      value={{\n+        phones,\n+      }}\n+    >\n+      {children}\n+    </ProductsContext.Provider>\n+  );\n+};\n+\n+export const useProductsContext = (): IProductsContext => {\n+  const context = useContext(ProductsContext);\n+\n+  if (!context) {\n+    throw new Error(\n+      'useProductsContext must be used within a ProductsProvider',\n+    );\n+  }\n+\n+  return context;\n+};\n"
                },
                {
                    "date": 1716297135742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,69 @@\n+import React, {\n+  createContext,\n+  FC,\n+  useContext,\n+  useEffect,\n+  useState,\n+} from 'react';\n+import { IProductDetails } from '../types';\n+\n+interface IProductsContext {\n+  phones: IProductDetails[];\n+}\n+\n+export const ProductsContext = createContext<IProductsContext>({\n+  phones: [],\n+});\n+\n+interface Props {\n+  children: React.ReactNode;\n+}\n+\n+export const ProductsProvider: FC<Props> = ({ children }) => {\n+  const [phones, setPhones] = useState<IProductDetails[]>([]);\n+  const [, setLoading] = useState(true);\n+  const [_error, setError] = useState(null);\n+\n+  useEffect(() => {\n+    fetch('/api/phones.json')\n+      .then(response => {\n+        if (!response.ok) {\n+          throw new Error('Network response was not ok');\n+        }\n+\n+        return response.json();\n+      })\n+      .then(data => {\n+        setPhones(data);\n+        setLoading(false);\n+        // eslint-disable-next-line no-console\n+        console.log(data);\n+      })\n+      .catch(error => {\n+        setError(error);\n+        setLoading(false);\n+      });\n+  }, []);\n+\n+  return (\n+    <ProductsContext.Provider\n+      value={{\n+        phones,\n+      }}\n+    >\n+      {children}\n+    </ProductsContext.Provider>\n+  );\n+};\n+\n+export const useProductsContext = (): IProductsContext => {\n+  const context = useContext(ProductsContext);\n+\n+  if (!context) {\n+    throw new Error(\n+      'useProductsContext must be used within a ProductsProvider',\n+    );\n+  }\n+\n+  return context;\n+};\n"
                },
                {
                    "date": 1716297514874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,104 @@\n+<<<<<<< HEAD\n+import React, {\n+  createContext,\n+  FC,\n+  useContext,\n+  useEffect,\n+  useState,\n+} from 'react';\n+import { ICartProduct, IProductDetails } from '../types';\n+=======\n+import React, { createContext, FC, useContext, useEffect, useState } from 'react';\n+import { ICartProduct, IProductDetails } from '../types';\n+>>>>>>> 0297473e363d93a12305ce7775250da8a728fe94\n+\n+interface IProductsContext {\n+  phones: IProductDetails[];\n+}\n+\n+\n+export const ProductsContext = createContext<IProductsContext>({\n+  phones: [],\n+});\n+\n+interface ICartItem {\n+  count: number;\n+  product: ICartProduct;\n+}\n+type CartItems = {\n+  [key: string]: ICartItem;\n+};\n+\n+\n+interface Props {\n+  children: React.ReactNode;\n+}\n+\n+\n+export const ProductsProvider: FC<Props> = ({ children }) => {\n+<<<<<<< HEAD\n+  const [phones, setPhones] = useState<IProductDetails[]>([]);\n+  const [, setLoading] = useState(true);\n+  const [, setError] = useState(null);\n+=======\n+  const CART_STORAGE_KEY = 'cart_catalog';\n+\n+  const [phones, setPhones] = useState<IProductDetails[]>([]);\n+  const [_loading, setLoading] = useState(true);\n+  const [_error, setError] = useState(null);\n+\n+  const [cartItems, setCartItems] = useState<CartItems>(() => {\n+    const item = localStorage.getItem(CART_STORAGE_KEY);\n+    return item ? JSON.parse(item) : {};\n+  });\n+>>>>>>> 0297473e363d93a12305ce7775250da8a728fe94\n+\n+  useEffect(() => {\n+    fetch('/api/phones.json')\n+      .then(response => {\n+        if (!response.ok) {\n+          throw new Error('Network response was not ok');\n+        }\n+\n+        return response.json();\n+      })\n+      .then(data => {\n+        setPhones(data);\n+        setLoading(false);\n+<<<<<<< HEAD\n+        // eslint-disable-next-line no-console\n+        console.log(data);\n+=======\n+>>>>>>> 0297473e363d93a12305ce7775250da8a728fe94\n+      })\n+      .catch(error => {\n+        setError(error);\n+        setLoading(false);\n+      });\n+  }, []);\n+\n+  useEffect(() => {\n+    localStorage.setItem(CART_STORAGE_KEY, JSON.stringify(cartItems));\n+  }, [cartItems]);\n+  return (\n+    <ProductsContext.Provider\n+      value={{\n+        phones,\n+      }}\n+    >\n+      {children}\n+    </ProductsContext.Provider>\n+  );\n+};\n+\n+export const useProductsContext = (): IProductsContext => {\n+  const context = useContext(ProductsContext);\n+\n+  if (!context) {\n+    throw new Error(\n+      'useProductsContext must be used within a ProductsProvider',\n+    );\n+  }\n+\n+  return context;\n+};\n"
                },
                {
                    "date": 1716297524472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,6 @@\n-<<<<<<< HEAD\n-import React, {\n-  createContext,\n-  FC,\n-  useContext,\n-  useEffect,\n-  useState,\n-} from 'react';\n-import { ICartProduct, IProductDetails } from '../types';\n-=======\n import React, { createContext, FC, useContext, useEffect, useState } from 'react';\n-import { ICartProduct, IProductDetails } from '../types';\n->>>>>>> 0297473e363d93a12305ce7775250da8a728fe94\n+import { IProductDetails } from '../types';\n \n interface IProductsContext {\n   phones: IProductDetails[];\n }\n@@ -35,24 +24,12 @@\n }\n \n \n export const ProductsProvider: FC<Props> = ({ children }) => {\n-<<<<<<< HEAD\n-  const [phones, setPhones] = useState<IProductDetails[]>([]);\n-  const [, setLoading] = useState(true);\n-  const [, setError] = useState(null);\n-=======\n-  const CART_STORAGE_KEY = 'cart_catalog';\n-\n-  const [phones, setPhones] = useState<IProductDetails[]>([]);\n+  const [phones, setPhones] = useState<IProductDetails[]>([])\n   const [_loading, setLoading] = useState(true);\n   const [_error, setError] = useState(null);\n \n-  const [cartItems, setCartItems] = useState<CartItems>(() => {\n-    const item = localStorage.getItem(CART_STORAGE_KEY);\n-    return item ? JSON.parse(item) : {};\n-  });\n->>>>>>> 0297473e363d93a12305ce7775250da8a728fe94\n \n   useEffect(() => {\n     fetch('/api/phones.json')\n       .then(response => {\n@@ -64,13 +41,9 @@\n       })\n       .then(data => {\n         setPhones(data);\n         setLoading(false);\n-<<<<<<< HEAD\n-        // eslint-disable-next-line no-console\n-        console.log(data);\n-=======\n->>>>>>> 0297473e363d93a12305ce7775250da8a728fe94\n+        console.log(data)\n       })\n       .catch(error => {\n         setError(error);\n         setLoading(false);\n"
                },
                {
                    "date": 1716297547439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,79 @@\n+import React, {\n+  createContext,\n+  FC,\n+  useContext,\n+  useEffect,\n+  useState,\n+} from 'react';\n+import { IProductDetails } from '../types';\n+\n+interface IProductsContext {\n+  phones: IProductDetails[];\n+}\n+\n+export const ProductsContext = createContext<IProductsContext>({\n+  phones: [],\n+});\n+\n+interface ICartItem {\n+  count: number;\n+  product: ICartProduct;\n+}\n+type CartItems = {\n+  [key: string]: ICartItem;\n+};\n+\n+interface Props {\n+  children: React.ReactNode;\n+}\n+\n+export const ProductsProvider: FC<Props> = ({ children }) => {\n+  const [phones, setPhones] = useState<IProductDetails[]>([]);\n+  const [_loading, setLoading] = useState(true);\n+  const [_error, setError] = useState(null);\n+\n+  useEffect(() => {\n+    fetch('/api/phones.json')\n+      .then(response => {\n+        if (!response.ok) {\n+          throw new Error('Network response was not ok');\n+        }\n+\n+        return response.json();\n+      })\n+      .then(data => {\n+        setPhones(data);\n+        setLoading(false);\n+        console.log(data);\n+      })\n+      .catch(error => {\n+        setError(error);\n+        setLoading(false);\n+      });\n+  }, []);\n+\n+  useEffect(() => {\n+    localStorage.setItem(CART_STORAGE_KEY, JSON.stringify(cartItems));\n+  }, [cartItems]);\n+  return (\n+    <ProductsContext.Provider\n+      value={{\n+        phones,\n+      }}\n+    >\n+      {children}\n+    </ProductsContext.Provider>\n+  );\n+};\n+\n+export const useProductsContext = (): IProductsContext => {\n+  const context = useContext(ProductsContext);\n+\n+  if (!context) {\n+    throw new Error(\n+      'useProductsContext must be used within a ProductsProvider',\n+    );\n+  }\n+\n+  return context;\n+};\n"
                },
                {
                    "date": 1716297613856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,8 +43,9 @@\n       })\n       .then(data => {\n         setPhones(data);\n         setLoading(false);\n+        // eslint-disable-next-line no-console\n         console.log(data);\n       })\n       .catch(error => {\n         setError(error);\n"
                },
                {
                    "date": 1716297644242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,80 @@\n+import React, {\n+  createContext,\n+  FC,\n+  useContext,\n+  useEffect,\n+  useState,\n+} from 'react';\n+import { ICartProduct, IProductDetails } from '../types';\n+\n+interface IProductsContext {\n+  phones: IProductDetails[];\n+}\n+\n+export const ProductsContext = createContext<IProductsContext>({\n+  phones: [],\n+});\n+\n+interface ICartItem {\n+  count: number;\n+  product: ICartProduct;\n+}\n+type CartItems = {\n+  [key: string]: ICartItem;\n+};\n+\n+interface Props {\n+  children: React.ReactNode;\n+}\n+\n+export const ProductsProvider: FC<Props> = ({ children }) => {\n+  const [phones, setPhones] = useState<IProductDetails[]>([]);\n+  const [_loading, setLoading] = useState(true);\n+  const [_error, setError] = useState(null);\n+\n+  useEffect(() => {\n+    fetch('/api/phones.json')\n+      .then(response => {\n+        if (!response.ok) {\n+          throw new Error('Network response was not ok');\n+        }\n+\n+        return response.json();\n+      })\n+      .then(data => {\n+        setPhones(data);\n+        setLoading(false);\n+        // eslint-disable-next-line no-console\n+        console.log(data);\n+      })\n+      .catch(error => {\n+        setError(error);\n+        setLoading(false);\n+      });\n+  }, []);\n+\n+  useEffect(() => {\n+    localStorage.setItem(CART_STORAGE_KEY, JSON.stringify(cartItems));\n+  }, [cartItems]);\n+  return (\n+    <ProductsContext.Provider\n+      value={{\n+        phones,\n+      }}\n+    >\n+      {children}\n+    </ProductsContext.Provider>\n+  );\n+};\n+\n+export const useProductsContext = (): IProductsContext => {\n+  const context = useContext(ProductsContext);\n+\n+  if (!context) {\n+    throw new Error(\n+      'useProductsContext must be used within a ProductsProvider',\n+    );\n+  }\n+\n+  return context;\n+};\n"
                },
                {
                    "date": 1716297651315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,80 @@\n+import React, {\n+  createContext,\n+  FC,\n+  useContext,\n+  useEffect,\n+  useState,\n+} from 'react';\n+import { ICartProduct, IProductDetails } from '../types';\n+\n+interface IProductsContext {\n+  phones: IProductDetails[];\n+}\n+\n+export const ProductsContext = createContext<IProductsContext>({\n+  phones: [],\n+});\n+\n+interface ICartItem {\n+  count: number;\n+  product: ICartProduct;\n+}\n+type CartItems = {\n+  [key: string]: ICartItem;\n+};\n+\n+interface Props {\n+  children: React.ReactNode;\n+}\n+\n+export const ProductsProvider: FC<Props> = ({ children }) => {\n+  const [phones, setPhones] = useState<IProductDetails[]>([]);\n+  const [, setLoading] = useState(true);\n+  const [_error, setError] = useState(null);\n+\n+  useEffect(() => {\n+    fetch('/api/phones.json')\n+      .then(response => {\n+        if (!response.ok) {\n+          throw new Error('Network response was not ok');\n+        }\n+\n+        return response.json();\n+      })\n+      .then(data => {\n+        setPhones(data);\n+        setLoading(false);\n+        // eslint-disable-next-line no-console\n+        console.log(data);\n+      })\n+      .catch(error => {\n+        setError(error);\n+        setLoading(false);\n+      });\n+  }, []);\n+\n+  useEffect(() => {\n+    localStorage.setItem(CART_STORAGE_KEY, JSON.stringify(cartItems));\n+  }, [cartItems]);\n+  return (\n+    <ProductsContext.Provider\n+      value={{\n+        phones,\n+      }}\n+    >\n+      {children}\n+    </ProductsContext.Provider>\n+  );\n+};\n+\n+export const useProductsContext = (): IProductsContext => {\n+  const context = useContext(ProductsContext);\n+\n+  if (!context) {\n+    throw new Error(\n+      'useProductsContext must be used within a ProductsProvider',\n+    );\n+  }\n+\n+  return context;\n+};\n"
                },
                {
                    "date": 1716297661662,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,81 @@\n+import React, {\n+  createContext,\n+  FC,\n+  useContext,\n+  useEffect,\n+  useState,\n+} from 'react';\n+import { ICartProduct, IProductDetails } from '../types';\n+\n+interface IProductsContext {\n+  phones: IProductDetails[];\n+}\n+\n+export const ProductsContext = createContext<IProductsContext>({\n+  phones: [],\n+});\n+\n+interface ICartItem {\n+  count: number;\n+  product: ICartProduct;\n+}\n+type CartItems = {\n+  [key: string]: ICartItem;\n+};\n+\n+interface Props {\n+  children: React.ReactNode;\n+}\n+\n+export const ProductsProvider: FC<Props> = ({ children }) => {\n+  const [phones, setPhones] = useState<IProductDetails[]>([]);\n+  const [, setLoading] = useState(true);\n+  const [, setError] = useState(null);\n+\n+  useEffect(() => {\n+    fetch('/api/phones.json')\n+      .then(response => {\n+        if (!response.ok) {\n+          throw new Error('Network response was not ok');\n+        }\n+\n+        return response.json();\n+      })\n+      .then(data => {\n+        setPhones(data);\n+        setLoading(false);\n+        // eslint-disable-next-line no-console\n+        console.log(data);\n+      })\n+      .catch(error => {\n+        setError(error);\n+        setLoading(false);\n+      });\n+  }, []);\n+\n+  useEffect(() => {\n+    localStorage.setItem(CART_STORAGE_KEY, JSON.stringify(cartItems));\n+  }, [cartItems]);\n+  \n+  return (\n+    <ProductsContext.Provider\n+      value={{\n+        phones,\n+      }}\n+    >\n+      {children}\n+    </ProductsContext.Provider>\n+  );\n+};\n+\n+export const useProductsContext = (): IProductsContext => {\n+  const context = useContext(ProductsContext);\n+\n+  if (!context) {\n+    throw new Error(\n+      'useProductsContext must be used within a ProductsProvider',\n+    );\n+  }\n+\n+  return context;\n+};\n"
                },
                {
                    "date": 1716302039190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,9 @@\n interface IProductsContext {\n   phones: IProductDetails[];\n }\n \n+\n export const ProductsContext = createContext<IProductsContext>({\n   phones: [],\n });\n \n@@ -22,259 +23,30 @@\n type CartItems = {\n   [key: string]: ICartItem;\n };\n \n+\n interface Props {\n   children: React.ReactNode;\n }\n \n+\n export const ProductsProvider: FC<Props> = ({ children }) => {\n   const [phones, setPhones] = useState<IProductDetails[]>([]);\n   const [, setLoading] = useState(true);\n   const [, setError] = useState(null);\n+  const CART_STORAGE_KEY = 'cart_catalog';\n \n-  useEffect(() => {\n-    fetch('/api/phones.json')\n-      .then(response => {\n-        if (!response.ok) {\n-          throw new Error('Network response was not ok');\n-        }\n-\n-        return response.json();\n-      })\n-      .then(data => {\n-        setPhones(data);\n-        setLoading(false);\n-        // eslint-disable-next-line no-console\n-        console.log(data);\n-      })\n-      .catch(error => {\n-        setError(error);\n-        setLoading(false);\n-      });\n-  }, []);\n-\n-  useEffect(() => {\n-    localStorage.setItem(CART_STORAGE_KEY, JSON.stringify(cartItems));\n-  }, [cartItems]);\n-  \n-  return (\n-    <ProductsContext.Provider\n-      value={{\n-        phones,\n-      }}\n-    >\n-      {children}\n-    </ProductsContext.Provider>\n-  );\n-};\n-\n-export const useProductsContext = (): IProductsContext => {\n-  const context = useContext(ProductsContext);\n-\n-  if (!context) {\n-    throw new Error(\n-      'useProductsContext must be used within a ProductsProvider',\n-    );\n-  }\n-\n-  return context;\n-};\n-import React, {\n-  createContext,\n-  FC,\n-  useContext,\n-  useEffect,\n-  useState,\n-} from 'react';\n-import { ICartProduct, IProductDetails } from '../types';\n-\n-interface IProductsContext {\n-  phones: IProductDetails[];\n-}\n-\n-export const ProductsContext = createContext<IProductsContext>({\n-  phones: [],\n-});\n-\n-interface ICartItem {\n-  count: number;\n-  product: ICartProduct;\n-}\n-type CartItems = {\n-  [key: string]: ICartItem;\n-};\n-\n-interface Props {\n-  children: React.ReactNode;\n-}\n-\n-export const ProductsProvider: FC<Props> = ({ children }) => {\n   const [phones, setPhones] = useState<IProductDetails[]>([]);\n-  const [, setLoading] = useState(true);\n-  const [_error, setError] = useState(null);\n-\n-  useEffect(() => {\n-    fetch('/api/phones.json')\n-      .then(response => {\n-        if (!response.ok) {\n-          throw new Error('Network response was not ok');\n-        }\n-\n-        return response.json();\n-      })\n-      .then(data => {\n-        setPhones(data);\n-        setLoading(false);\n-        // eslint-disable-next-line no-console\n-        console.log(data);\n-      })\n-      .catch(error => {\n-        setError(error);\n-        setLoading(false);\n-      });\n-  }, []);\n-\n-  useEffect(() => {\n-    localStorage.setItem(CART_STORAGE_KEY, JSON.stringify(cartItems));\n-  }, [cartItems]);\n-  return (\n-    <ProductsContext.Provider\n-      value={{\n-        phones,\n-      }}\n-    >\n-      {children}\n-    </ProductsContext.Provider>\n-  );\n-};\n-\n-export const useProductsContext = (): IProductsContext => {\n-  const context = useContext(ProductsContext);\n-\n-  if (!context) {\n-    throw new Error(\n-      'useProductsContext must be used within a ProductsProvider',\n-    );\n-  }\n-\n-  return context;\n-};\n-import React, {\n-  createContext,\n-  FC,\n-  useContext,\n-  useEffect,\n-  useState,\n-} from 'react';\n-import { ICartProduct, IProductDetails } from '../types';\n-\n-interface IProductsContext {\n-  phones: IProductDetails[];\n-}\n-\n-export const ProductsContext = createContext<IProductsContext>({\n-  phones: [],\n-});\n-\n-interface ICartItem {\n-  count: number;\n-  product: ICartProduct;\n-}\n-type CartItems = {\n-  [key: string]: ICartItem;\n-};\n-\n-interface Props {\n-  children: React.ReactNode;\n-}\n-\n-export const ProductsProvider: FC<Props> = ({ children }) => {\n-  const [phones, setPhones] = useState<IProductDetails[]>([]);\n   const [_loading, setLoading] = useState(true);\n   const [_error, setError] = useState(null);\n \n-  useEffect(() => {\n-    fetch('/api/phones.json')\n-      .then(response => {\n-        if (!response.ok) {\n-          throw new Error('Network response was not ok');\n-        }\n+  const [cartItems, setCartItems] = useState<CartItems>(() => {\n+    const item = localStorage.getItem(CART_STORAGE_KEY);\n+    return item ? JSON.parse(item) : {};\n+  });\n \n-        return response.json();\n-      })\n-      .then(data => {\n-        setPhones(data);\n-        setLoading(false);\n-        // eslint-disable-next-line no-console\n-        console.log(data);\n-      })\n-      .catch(error => {\n-        setError(error);\n-        setLoading(false);\n-      });\n-  }, []);\n-\n   useEffect(() => {\n-    localStorage.setItem(CART_STORAGE_KEY, JSON.stringify(cartItems));\n-  }, [cartItems]);\n-  return (\n-    <ProductsContext.Provider\n-      value={{\n-        phones,\n-      }}\n-    >\n-      {children}\n-    </ProductsContext.Provider>\n-  );\n-};\n-\n-export const useProductsContext = (): IProductsContext => {\n-  const context = useContext(ProductsContext);\n-\n-  if (!context) {\n-    throw new Error(\n-      'useProductsContext must be used within a ProductsProvider',\n-    );\n-  }\n-\n-  return context;\n-};\n-import React, {\n-  createContext,\n-  FC,\n-  useContext,\n-  useEffect,\n-  useState,\n-} from 'react';\n-import { IProductDetails } from '../types';\n-\n-interface IProductsContext {\n-  phones: IProductDetails[];\n-}\n-\n-export const ProductsContext = createContext<IProductsContext>({\n-  phones: [],\n-});\n-\n-interface ICartItem {\n-  count: number;\n-  product: ICartProduct;\n-}\n-type CartItems = {\n-  [key: string]: ICartItem;\n-};\n-\n-interface Props {\n-  children: React.ReactNode;\n-}\n-\n-export const ProductsProvider: FC<Props> = ({ children }) => {\n-  const [phones, setPhones] = useState<IProductDetails[]>([]);\n-  const [_loading, setLoading] = useState(true);\n-  const [_error, setError] = useState(null);\n-\n-  useEffect(() => {\n     fetch('/api/phones.json')\n       .then(response => {\n         if (!response.ok) {\n           throw new Error('Network response was not ok');\n@@ -296,83 +68,10 @@\n \n   useEffect(() => {\n     localStorage.setItem(CART_STORAGE_KEY, JSON.stringify(cartItems));\n   }, [cartItems]);\n-  return (\n-    <ProductsContext.Provider\n-      value={{\n-        phones,\n-      }}\n-    >\n-      {children}\n-    </ProductsContext.Provider>\n-  );\n-};\n \n-export const useProductsContext = (): IProductsContext => {\n-  const context = useContext(ProductsContext);\n-\n-  if (!context) {\n-    throw new Error(\n-      'useProductsContext must be used within a ProductsProvider',\n-    );\n-  }\n-\n-  return context;\n-};\n-import React, { createContext, FC, useContext, useEffect, useState } from 'react';\n-import { IProductDetails } from '../types';\n-\n-interface IProductsContext {\n-  phones: IProductDetails[];\n-}\n-\n-\n-export const ProductsContext = createContext<IProductsContext>({\n-  phones: [],\n-});\n-\n-interface ICartItem {\n-  count: number;\n-  product: ICartProduct;\n-}\n-type CartItems = {\n-  [key: string]: ICartItem;\n-};\n-\n-\n-interface Props {\n-  children: React.ReactNode;\n-}\n-\n-\n-export const ProductsProvider: FC<Props> = ({ children }) => {\n-  const [phones, setPhones] = useState<IProductDetails[]>([])\n-  const [_loading, setLoading] = useState(true);\n-  const [_error, setError] = useState(null);\n-\n-\n   useEffect(() => {\n-    fetch('/api/phones.json')\n-      .then(response => {\n-        if (!response.ok) {\n-          throw new Error('Network response was not ok');\n-        }\n-\n-        return response.json();\n-      })\n-      .then(data => {\n-        setPhones(data);\n-        setLoading(false);\n-        console.log(data)\n-      })\n-      .catch(error => {\n-        setError(error);\n-        setLoading(false);\n-      });\n-  }, []);\n-\n-  useEffect(() => {\n     localStorage.setItem(CART_STORAGE_KEY, JSON.stringify(cartItems));\n   }, [cartItems]);\n   return (\n     <ProductsContext.Provider\n@@ -395,351 +94,4 @@\n   }\n \n   return context;\n };\n-import React, {\n-  createContext,\n-  FC,\n-  useContext,\n-  useEffect,\n-  useState,\n-} from 'react';\n-import { IProductDetails } from '../types';\n-\n-interface IProductsContext {\n-  phones: IProductDetails[];\n-}\n-\n-export const ProductsContext = createContext<IProductsContext>({\n-  phones: [],\n-});\n-\n-interface Props {\n-  children: React.ReactNode;\n-}\n-\n-export const ProductsProvider: FC<Props> = ({ children }) => {\n-  const [phones, setPhones] = useState<IProductDetails[]>([]);\n-  const [, setLoading] = useState(true);\n-  const [_error, setError] = useState(null);\n-\n-  useEffect(() => {\n-    fetch('/api/phones.json')\n-      .then(response => {\n-        if (!response.ok) {\n-          throw new Error('Network response was not ok');\n-        }\n-\n-        return response.json();\n-      })\n-      .then(data => {\n-        setPhones(data);\n-        setLoading(false);\n-        // eslint-disable-next-line no-console\n-        console.log(data);\n-      })\n-      .catch(error => {\n-        setError(error);\n-        setLoading(false);\n-      });\n-  }, []);\n-\n-  return (\n-    <ProductsContext.Provider\n-      value={{\n-        phones,\n-      }}\n-    >\n-      {children}\n-    </ProductsContext.Provider>\n-  );\n-};\n-\n-export const useProductsContext = (): IProductsContext => {\n-  const context = useContext(ProductsContext);\n-\n-  if (!context) {\n-    throw new Error(\n-      'useProductsContext must be used within a ProductsProvider',\n-    );\n-  }\n-\n-  return context;\n-};\n-import React, {\n-  createContext,\n-  FC,\n-  useContext,\n-  useEffect,\n-  useState,\n-} from 'react';\n-import { IProductDetails } from '../types';\n-\n-interface IProductsContext {\n-  phones: IProductDetails[];\n-}\n-\n-export const ProductsContext = createContext<IProductsContext>({\n-  phones: [],\n-});\n-\n-interface Props {\n-  children: React.ReactNode;\n-}\n-\n-export const ProductsProvider: FC<Props> = ({ children }) => {\n-  const [phones, setPhones] = useState<IProductDetails[]>([]);\n-  const [loading, setLoading] = useState(true);\n-  const [_error, setError] = useState(null);\n-\n-  useEffect(() => {\n-    fetch('/api/phones.json')\n-      .then(response => {\n-        if (!response.ok) {\n-          throw new Error('Network response was not ok');\n-        }\n-\n-        return response.json();\n-      })\n-      .then(data => {\n-        setPhones(data);\n-        setLoading(false);\n-        // eslint-disable-next-line no-console\n-        console.log(data);\n-      })\n-      .catch(error => {\n-        setError(error);\n-        setLoading(false);\n-      });\n-  }, []);\n-\n-  return (\n-    <ProductsContext.Provider\n-      value={{\n-        phones,\n-      }}\n-    >\n-      {children}\n-    </ProductsContext.Provider>\n-  );\n-};\n-\n-export const useProductsContext = (): IProductsContext => {\n-  const context = useContext(ProductsContext);\n-\n-  if (!context) {\n-    throw new Error(\n-      'useProductsContext must be used within a ProductsProvider',\n-    );\n-  }\n-\n-  return context;\n-};\n-/* eslint-disable @typescript-eslint/naming-convention */\n-import React, {\n-  createContext,\n-  FC,\n-  useContext,\n-  useEffect,\n-  useState,\n-} from 'react';\n-import { IProductDetails } from '../types';\n-\n-interface IProductsContext {\n-  phones: IProductDetails[];\n-}\n-\n-export const ProductsContext = createContext<IProductsContext>({\n-  phones: [],\n-});\n-\n-interface Props {\n-  children: React.ReactNode;\n-}\n-\n-export const ProductsProvider: FC<Props> = ({ children }) => {\n-  const [phones, setPhones] = useState<IProductDetails[]>([]);\n-  const [_loading, setLoading] = useState(true);\n-  const [_error, setError] = useState(null);\n-\n-  useEffect(() => {\n-    fetch('/api/phones.json')\n-      .then(response => {\n-        if (!response.ok) {\n-          throw new Error('Network response was not ok');\n-        }\n-\n-        return response.json();\n-      })\n-      .then(data => {\n-        setPhones(data);\n-        setLoading(false);\n-        // eslint-disable-next-line no-console\n-        console.log(data);\n-      })\n-      .catch(error => {\n-        setError(error);\n-        setLoading(false);\n-      });\n-  }, []);\n-\n-  return (\n-    <ProductsContext.Provider\n-      value={{\n-        phones,\n-      }}\n-    >\n-      {children}\n-    </ProductsContext.Provider>\n-  );\n-};\n-\n-export const useProductsContext = (): IProductsContext => {\n-  const context = useContext(ProductsContext);\n-\n-  if (!context) {\n-    throw new Error(\n-      'useProductsContext must be used within a ProductsProvider',\n-    );\n-  }\n-\n-  return context;\n-};\n-import React, {\n-  createContext,\n-  FC,\n-  useContext,\n-  useEffect,\n-  useState,\n-} from 'react';\n-import { IProductDetails } from '../types';\n-\n-interface IProductsContext {\n-  phones: IProductDetails[];\n-}\n-\n-export const ProductsContext = createContext<IProductsContext>({\n-  phones: [],\n-});\n-\n-interface Props {\n-  children: React.ReactNode;\n-}\n-\n-export const ProductsProvider: FC<Props> = ({ children }) => {\n-  const [phones, setPhones] = useState<IProductDetails[]>([]);\n-  // eslint-disable-next-line @typescript-eslint/naming-convention\n-  const [_loading, setLoading] = useState(true);\n-  const [_error, setError] = useState(null);\n-\n-  useEffect(() => {\n-    fetch('/api/phones.json')\n-      .then(response => {\n-        if (!response.ok) {\n-          throw new Error('Network response was not ok');\n-        }\n-\n-        return response.json();\n-      })\n-      .then(data => {\n-        setPhones(data);\n-        setLoading(false);\n-        // eslint-disable-next-line no-console\n-        console.log(data);\n-      })\n-      .catch(error => {\n-        setError(error);\n-        setLoading(false);\n-      });\n-  }, []);\n-\n-  return (\n-    <ProductsContext.Provider\n-      value={{\n-        phones,\n-      }}\n-    >\n-      {children}\n-    </ProductsContext.Provider>\n-  );\n-};\n-\n-export const useProductsContext = (): IProductsContext => {\n-  const context = useContext(ProductsContext);\n-\n-  if (!context) {\n-    throw new Error(\n-      'useProductsContext must be used within a ProductsProvider',\n-    );\n-  }\n-\n-  return context;\n-};\n-import React, {\n-  createContext,\n-  FC,\n-  useContext,\n-  useEffect,\n-  useState,\n-} from 'react';\n-import { IProductDetails } from '../types';\n-\n-interface IProductsContext {\n-  phones: IProductDetails[];\n-}\n-\n-export const ProductsContext = createContext<IProductsContext>({\n-  phones: [],\n-});\n-\n-interface Props {\n-  children: React.ReactNode;\n-}\n-\n-export const ProductsProvider: FC<Props> = ({ children }) => {\n-  const [phones, setPhones] = useState<IProductDetails[]>([]);\n-  const [_loading, setLoading] = useState(true);\n-  const [_error, setError] = useState(null);\n-\n-  useEffect(() => {\n-    fetch('/api/phones.json')\n-      .then(response => {\n-        if (!response.ok) {\n-          throw new Error('Network response was not ok');\n-        }\n-\n-        return response.json();\n-      })\n-      .then(data => {\n-        setPhones(data);\n-        setLoading(false);\n-        // eslint-disable-next-line no-console\n-        console.log(data);\n-      })\n-      .catch(error => {\n-        setError(error);\n-        setLoading(false);\n-      });\n-  }, []);\n-\n-  return (\n-    <ProductsContext.Provider\n-      value={{\n-        phones,\n-      }}\n-    >\n-      {children}\n-    </ProductsContext.Provider>\n-  );\n-};\n-\n-export const useProductsContext = (): IProductsContext => {\n-  const context = useContext(ProductsContext);\n-\n-  if (!context) {\n-    throw new Error(\n-      'useProductsContext must be used within a ProductsProvider',\n-    );\n-  }\n-\n-  return context;\n-};\n"
                },
                {
                    "date": 1716302124318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,8 @@\n interface IProductsContext {\n   phones: IProductDetails[];\n }\n \n-\n export const ProductsContext = createContext<IProductsContext>({\n   phones: [],\n });\n \n"
                },
                {
                    "date": 1716302160122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,21 +22,18 @@\n type CartItems = {\n   [key: string]: ICartItem;\n };\n \n-\n interface Props {\n   children: React.ReactNode;\n }\n \n-\n export const ProductsProvider: FC<Props> = ({ children }) => {\n   const [phones, setPhones] = useState<IProductDetails[]>([]);\n   const [, setLoading] = useState(true);\n   const [, setError] = useState(null);\n   const CART_STORAGE_KEY = 'cart_catalog';\n \n-  const [phones, setPhones] = useState<IProductDetails[]>([]);\n   const [_loading, setLoading] = useState(true);\n   const [_error, setError] = useState(null);\n \n   const [cartItems, setCartItems] = useState<CartItems>(() => {\n"
                },
                {
                    "date": 1716302170484,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,8 @@\n   const [, setLoading] = useState(true);\n   const [, setError] = useState(null);\n   const CART_STORAGE_KEY = 'cart_catalog';\n \n-  const [_loading, setLoading] = useState(true);\n   const [_error, setError] = useState(null);\n \n   const [cartItems, setCartItems] = useState<CartItems>(() => {\n     const item = localStorage.getItem(CART_STORAGE_KEY);\n"
                },
                {
                    "date": 1716302177221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,12 +32,11 @@\n   const [, setLoading] = useState(true);\n   const [, setError] = useState(null);\n   const CART_STORAGE_KEY = 'cart_catalog';\n \n-  const [_error, setError] = useState(null);\n-\n   const [cartItems, setCartItems] = useState<CartItems>(() => {\n     const item = localStorage.getItem(CART_STORAGE_KEY);\n+    \n     return item ? JSON.parse(item) : {};\n   });\n \n   useEffect(() => {\n"
                },
                {
                    "date": 1716302187331,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,11 +32,11 @@\n   const [, setLoading] = useState(true);\n   const [, setError] = useState(null);\n   const CART_STORAGE_KEY = 'cart_catalog';\n \n-  const [cartItems, setCartItems] = useState<CartItems>(() => {\n+  const [cartItems, ] = useState<CartItems>(() => {\n     const item = localStorage.getItem(CART_STORAGE_KEY);\n-    \n+\n     return item ? JSON.parse(item) : {};\n   });\n \n   useEffect(() => {\n"
                },
                {
                    "date": 1716302200099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,8 @@\n   const [, setLoading] = useState(true);\n   const [, setError] = useState(null);\n   const CART_STORAGE_KEY = 'cart_catalog';\n \n-  const [cartItems, ] = useState<CartItems>(() => {\n     const item = localStorage.getItem(CART_STORAGE_KEY);\n \n     return item ? JSON.parse(item) : {};\n   });\n"
                },
                {
                    "date": 1716302208375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,8 +32,9 @@\n   const [, setLoading] = useState(true);\n   const [, setError] = useState(null);\n   const CART_STORAGE_KEY = 'cart_catalog';\n \n+  const [cartItems, = useState<CartItems>(() => {\n     const item = localStorage.getItem(CART_STORAGE_KEY);\n \n     return item ? JSON.parse(item) : {};\n   });\n"
                },
                {
                    "date": 1716302217148,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n   const [, setLoading] = useState(true);\n   const [, setError] = useState(null);\n   const CART_STORAGE_KEY = 'cart_catalog';\n \n-  const [cartItems, = useState<CartItems>(() => {\n+  const [cartItems] = useState<CartItems>(() => {\n     const item = localStorage.getItem(CART_STORAGE_KEY);\n \n     return item ? JSON.parse(item) : {};\n   });\n@@ -66,8 +66,9 @@\n \n   useEffect(() => {\n     localStorage.setItem(CART_STORAGE_KEY, JSON.stringify(cartItems));\n   }, [cartItems]);\n+  \n   return (\n     <ProductsContext.Provider\n       value={{\n         phones,\n"
                }
            ],
            "date": 1716296981114,
            "name": "Commit-0",
            "content": "import React, {\n  createContext,\n  FC,\n  useContext,\n  useEffect,\n  useState,\n} from 'react';\nimport { IProductDetails } from '../types';\n\ninterface IProductsContext {\n  phones: IProductDetails[];\n}\n\nexport const ProductsContext = createContext<IProductsContext>({\n  phones: [],\n});\n\ninterface Props {\n  children: React.ReactNode;\n}\n\nexport const ProductsProvider: FC<Props> = ({ children }) => {\n  const [phones, setPhones] = useState<IProductDetails[]>([]);\n  const [_loading, setLoading] = useState(true);\n  const [_error, setError] = useState(null);\n\n  useEffect(() => {\n    fetch('/api/phones.json')\n      .then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n\n        return response.json();\n      })\n      .then(data => {\n        setPhones(data);\n        setLoading(false);\n        // eslint-disable-next-line no-console\n        console.log(data);\n      })\n      .catch(error => {\n        setError(error);\n        setLoading(false);\n      });\n  }, []);\n\n  return (\n    <ProductsContext.Provider\n      value={{\n        phones,\n      }}\n    >\n      {children}\n    </ProductsContext.Provider>\n  );\n};\n\nexport const useProductsContext = (): IProductsContext => {\n  const context = useContext(ProductsContext);\n\n  if (!context) {\n    throw new Error(\n      'useProductsContext must be used within a ProductsProvider',\n    );\n  }\n\n  return context;\n};\n"
        }
    ]
}